=TODO list=

This page contains required action-items: decisions and implementation tasks

= Decisions =

 # Decide how the application under test (AUT) is run:
   * Either using SandboxLoader which is a separate Java application _or_
   * As a normal application with a command line argument of using the agent which in turns triggers sandboxing
 # Define heap usage of package, so that we can enforce user-defined limit in a reasonably intuitive way.
   * Consider case where package holds reference to large object passed by client.
   * Consider case where package returns an instance of a class defined within the untrusted package.  Client may now call methods on this instance, which could result in new allocations, or in the instance keeping a reference to objects passed in by the client.
   * Candidate definition: All memory reachable from:
      * Static references within classes defined by the package.
      * Instances of classes within the package that are returned to the client.
         * What about the case where the package returns an instance of a class *not* defined in the package (say a hash table), but this instance contains references to instances of package-defined classes.  
         * Perhaps we need to track all allocated instances of package classes.
      * Object references stored on the stack of a thread created by the package.


= Implementation Tasks =
 # (Mike) Implement a JNI call that takes in a list of Java object references and calculates the total heap memory used by all objects reachable from that list.  This function needs to consider the possibility that the trees reachable from each object in the list may overlap each other, i.e. they may be non-disjoint.
 # (Nick) Implement code in the Java layer to either (a) track all objects allocated within the package or (b) track all objects returned from the package to client code.  For either approach, we must also track when these objects are freed by the garbage collector.